{"version":3,"sources":["components/SpotifyButton.js","components/Pokemon.js","components/Message.js","components/PokemonList.js","components/Dashboard.js","App.js","serviceWorker.js","index.js"],"names":["SpotifyButton","className","href","src","alt","Pokemon","name","pokeIndex","onClick","loading","toUpperCase","Message","link","message","target","PokemonList","isLoggedIn","useState","pokemon","setPokemon","useEffect","a","axios","get","res","pokemonArr","data","results","fetchPokemon","teamTitle","playlistBtn","list","team","setTeam","teamCount","setTeamCount","setMessage","addPokemon","url","types","push","console","log","length","post","then","catch","err","makePlaylist","map","index","key","filter","_","i","removePokemon","Dashboard","state","display_name","setState","this","getMe","spotifyLogin","React","Component","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.1e8cbe7c.chunk.js","sourcesContent":["import React from 'react'\r\n//import PropTypes from 'prop-types'\r\n\r\nconst SpotifyButton = () => {\r\n  return (\r\n    <div className=\"mx-8\">\r\n      <div className=\"flex flex-wrap justify-center\">\r\n        <h1 className=\"py-4 my-4 text-gray-700 font-semibold\">Login to Spotify to create a playlist customized to your first generation Pokemon team</h1>\r\n        <a \r\n          href='http://localhost:5000/api/spotify/auth'\r\n          className=\"btn bg-white hover:bg-gray-100 text-gray-800 font-semibold my-2 mx-2 py-2 px-4 border border-gray-400 rounded shadow\"\r\n        >Login</a>\r\n      </div>\r\n      <div>\r\n        <img className=\"my-4\" src={process.env.PUBLIC_URL + '/images/pokeshelfdrib.webp'} alt=\"pokeshelf\"/>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SpotifyButton","import React from 'react'\r\n\r\nconst Pokemon = ({ name, pokeIndex, onClick }) => {\r\n  return (\r\n    <div>\r\n      <button className=\"btn bg-white hover:bg-gray-300\" onClick={() => onClick()}>\r\n        <img \r\n          src={`https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${pokeIndex}.png`} \r\n          alt={`pokemon-no-${pokeIndex}`}\r\n          loading=\"lazy\"\r\n          />\r\n        <p>{name.toUpperCase()}</p>\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Pokemon","import React from 'react'\r\n\r\nconst Message = ({message}) => {\r\n  let link\r\n  message ? link = <a \r\n  className=\"btn bg-white hover:bg-gray-100 text-gray-800 font-semibold my-2 mx-2 py-2 px-4 border border-gray-400 rounded shadow\" \r\n  href={message} \r\n  target=\"_blank\">Your Playlist</a>\r\n  : link = null\r\n\r\n  return (\r\n    <div className=\"flex justify-center my-2\">\r\n      {link}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Message","import React, { useState, useEffect } from 'react'\r\nimport Pokemon from './Pokemon'\r\nimport Message from './Message'\r\nimport axios from 'axios'\r\n\r\nconst PokemonList = ({ isLoggedIn }) => {\r\n  // Pokemon State\r\n  const [pokemon, setPokemon] = useState([])\r\n  useEffect(() => {\r\n    const fetchPokemon = async () => {\r\n      const res = await axios.get('https://pokeapi.co/api/v2/pokemon?limit=151')\r\n      let pokemonArr = res.data.results\r\n\r\n      setPokemon(pokemonArr)\r\n    }\r\n    fetchPokemon()\r\n  }, [])\r\n\r\n  // Team State\r\n  const [team, setTeam] = useState([])\r\n  const [teamCount, setTeamCount] = useState(0)\r\n\r\n  // Message State\r\n  const [message, setMessage] = useState()\r\n\r\n  const addPokemon = async (name, pokeIndex, url) => {\r\n    if(teamCount < 6) {\r\n      // Fetch this pokemon's types\r\n      const res = await axios.get(url)\r\n      // Create Pokemon object\r\n      const pokemon = { name, pokeIndex, types: res.data.types }\r\n      // Pushes New Team Member to Team\r\n      team.push(pokemon)\r\n      // Increments Team Count\r\n      setTeamCount(teamCount + 1)\r\n      setTeam(team)\r\n    } else {\r\n      console.log('Party is full')\r\n    }\r\n  }\r\n\r\n  const removePokemon = (index) => {\r\n    if(teamCount > 0) {\r\n      setTeamCount(teamCount - 1)\r\n\r\n      // Filters team based on the index of the array selected\r\n      setTeam(team.filter((_, i) => i !== index))\r\n    } else {\r\n      console.log('Party is empty')\r\n    }\r\n  }\r\n\r\n  const makePlaylist = (team) => {\r\n    if(teamCount === 6) {\r\n      axios.post('/api/spotify/makePlaylist', team)\r\n        .then(res => {\r\n          setMessage(res.data)\r\n          setTeam([])\r\n        })\r\n        .catch(err => console.log(err))\r\n      return 'Creating Playlist'\r\n    } else {\r\n      return 'Fill You Team Up First!'\r\n    }\r\n  }\r\n\r\n  let teamTitle\r\n  team.length ? teamTitle = <h1 className=\"mb-2 text-gray-700\">Your Team</h1> : teamTitle = null\r\n\r\n  let playlistBtn\r\n  team.length === 6 ? playlistBtn = \r\n    <button className=\"btn bg-white hover:bg-gray-100 text-gray-800 font-semibold my-2 py-2 px-4 border border-gray-400 rounded shadow\" \r\n    onClick={() => makePlaylist(team)}>Make Playlist</button>\r\n    :\r\n    playlistBtn = null\r\n\r\n  let list\r\n  isLoggedIn ? list = \r\n    <div className=\"flex flex-col items-center\">\r\n      <h2 className=\"mb-2 text-gray-700\">Choose 6 Pokemon For Your Team</h2>\r\n      <div className=\"flex flex-wrap overflow-y-scroll mb-4 h-64 md:w-4/12 w-11/12 rounded bg-white shadow-lg\">\r\n        {pokemon.map(({ name, url }, index) => (\r\n          <Pokemon onClick={() => addPokemon(name, index, url)} pokeIndex={index + 1} name={name} key={url} />\r\n        ))}\r\n      </div>\r\n      {teamTitle}\r\n      <div className=\"flex flex-wrap justify-center\">\r\n        {team.map(({ name, pokeIndex }, index) => (\r\n          <Pokemon onClick={() => removePokemon(index)} pokeIndex={pokeIndex + 1} name={name} key={index} />\r\n        ))}\r\n      </div>\r\n      {playlistBtn}\r\n    </div>\r\n  :\r\n  list = null\r\n\r\n  return (\r\n    <div>\r\n      {list}\r\n      <Message message={message} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default PokemonList;","import React, { /* Component */ } from 'react';\r\nimport SpotifyButton from './SpotifyButton';\r\nimport PokemonList from './PokemonList';\r\nimport axios from 'axios';\r\n\r\nclass Dashboard extends React.Component {\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      name: '',\r\n      isLoggedIn: false,\r\n    }\r\n\t}\r\n\t\r\n  getMe() {\r\n    axios.get('/api/spotify/me')\r\n      .then(res => {\r\n          if(res.data.display_name) {\r\n              this.setState({isLoggedIn: true, name: res.data.display_name})\r\n          }\r\n      })\r\n      .catch(err => console.log(err))\r\n  }\r\n  componentDidMount() {\r\n    this.getMe();\r\n\t}\r\n\t\r\n  render() {\r\n    const { isLoggedIn } = this.state\r\n\r\n    let spotifyLogin;\r\n\r\n    isLoggedIn ? spotifyLogin = null : spotifyLogin = <SpotifyButton />\r\n    \r\n    return (\r\n      <div>\r\n        <h1 className=\"text-4xl font-bold text-gray-700 p-2 m-4\">Pokemon Master Playlist</h1>\r\n        <div className=\"flex flex-wrap justify-center items-center md:my-8\">\r\n          {spotifyLogin}\r\n          <PokemonList isLoggedIn={isLoggedIn} />\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Dashboard;","import React from 'react';\r\nimport Dashboard from './components/Dashboard'\r\n\r\nexport const App = () => {\r\n    return (\r\n        <div className=\"bg-orange-300 h-screen font-display overflow-hidden\">\r\n            <Dashboard />\r\n        </div>\r\n    )\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {App} from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport './styles/tailwind.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\nserviceWorker.register();"],"sourceRoot":""}