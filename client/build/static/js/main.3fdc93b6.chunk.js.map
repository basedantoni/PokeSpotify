{"version":3,"sources":["components/SpotifyButton.js","components/Pokemon.js","components/PokemonList.js","components/Dashboard.js","App.js","serviceWorker.js","index.js"],"names":["SpotifyButton","props","button","isLoggedIn","href","Pokemon","name","pokeIndex","onClick","src","alt","loading","toUpperCase","PokemonList","useState","pokemon","setPokemon","useEffect","a","axios","get","res","pokemonArr","data","results","fetchPokemon","list","team","setTeam","teamCount","setTeamCount","addPokemon","url","types","push","console","log","map","index","key","filter","_","i","removePokemon","post","makePlaylist","Dashboard","state","then","display_name","setState","catch","err","this","getMe","React","Component","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"iNAoBeA,EAjBO,SAACC,GACrB,IAEIC,EAOJ,OALEA,EAJiBD,EAAME,WAId,KAEA,uBAAGC,KAAK,0CAAR,SAIT,6BACGF,I,8BCEQG,EAfC,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,KAAMC,EAAyB,EAAzBA,UAAWC,EAAc,EAAdA,QAClC,OACE,6BACE,4BAAQA,QAAS,kBAAMA,MACrB,yBACEC,IAAG,mFAA8EF,EAA9E,QACHG,IAAG,qBAAgBH,GACnBI,QAAQ,SAEV,2BAAIL,EAAKM,kB,gBCsEFC,EA7EK,SAAC,GAAoB,IAAlBV,EAAiB,EAAjBA,WAAiB,EAERW,mBAAS,IAFD,mBAE/BC,EAF+B,KAEtBC,EAFsB,KAGtCC,qBAAU,WAAM,4CACd,8BAAAC,EAAA,sEACoBC,IAAMC,IAAI,+CAD9B,OACQC,EADR,OAEMC,EAAaD,EAAIE,KAAKC,QAE1BR,EAAWM,GAJb,4CADc,uBAAC,WAAD,wBAOdG,KACC,IAXmC,IAsDlCC,EAtDkC,EAcdZ,mBAAS,IAdK,mBAc/Ba,EAd+B,KAczBC,EAdyB,OAeJd,mBAAS,GAfL,mBAe/Be,EAf+B,KAepBC,EAfoB,KAiBhCC,EAAU,uCAAG,WAAOzB,EAAMC,EAAWyB,GAAxB,iBAAAd,EAAA,2DACdW,EAAY,GADE,wBAGfC,EAAaD,EAAY,GAHV,SAKGV,IAAMC,IAAIY,GALb,OAKTX,EALS,OAOTN,EAAU,CAAET,OAAMC,YAAW0B,MAAOZ,EAAIE,KAAKU,OAGnDN,EAAKO,KAAKnB,GACVa,EAAQD,GAXO,wBAafQ,QAAQC,IAAI,iBAbG,4CAAH,0DAqDhB,OAfaV,EAAbvB,EACE,6BACE,gDACCY,EAAQsB,KAAI,WAAgBC,GAAhB,IAAGhC,EAAH,EAAGA,KAAM0B,EAAT,EAASA,IAAT,OACX,kBAAC,EAAD,CAASxB,QAAS,kBAAMuB,EAAWzB,EAAMgC,EAAON,IAAMzB,UAAW+B,EAAQ,EAAGhC,KAAMA,EAAMiC,IAAKP,OAE/F,oCACCL,EAAKU,KAAI,WAAsBC,GAAtB,IAAGhC,EAAH,EAAGA,KAAMC,EAAT,EAASA,UAAT,OACR,kBAAC,EAAD,CAASC,QAAS,kBA7BF,SAAC8B,GAClBT,EAAY,GACbC,EAAaD,EAAY,GAGzBD,EAAQD,EAAKa,QAAO,SAACC,EAAGC,GAAJ,OAAUA,IAAMJ,OAEpCH,QAAQC,IAAI,kBAsBcO,CAAcL,IAAQ/B,UAAWA,EAAY,EAAGD,KAAMA,EAAMiC,IAAKD,OAE3F,4BAAQ9B,QAAS,kBApBA,SAACmB,GACpB,OAAiB,IAAdE,GACDV,IAAMyB,KAAK,4BAA6BjB,GACjC,qBAEA,0BAegBkB,CAAalB,KAApC,kBAGG,KAGL,6BACGD,ICrCQoB,E,kDAjCb,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXzC,KAAM,GACNH,YAAY,GAJF,E,oDAQL,IAAD,OACNgB,IAAMC,IAAI,mBACP4B,MAAK,SAAA3B,GACCA,EAAIE,KAAK0B,cACR,EAAKC,SAAS,CAAC/C,YAAY,EAAMG,KAAMe,EAAIE,KAAK0B,kBAGvDE,OAAM,SAAAC,GAAG,OAAIjB,QAAQC,IAAIgB,Q,0CAG5BC,KAAKC,U,+BAGG,IACAnD,EAAekD,KAAKN,MAApB5C,WACR,OACE,6BACE,yCAAgBkD,KAAKN,MAAMzC,MAC3B,kBAAC,EAAD,CAAeH,WAAYA,IAC3B,kBAAC,EAAD,CAAaA,WAAYA,S,GA5BToD,IAAMC,WCFjBC,EAAM,WACf,OACI,6BACI,kBAAC,EAAD,QCMNC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTjB,MAAK,SAAAsB,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBzB,QACfoB,UAAUC,cAAcO,YAI1BxC,QAAQC,IACN,iHAKE8B,GAAUA,EAAOU,UACnBV,EAAOU,SAASN,KAMlBnC,QAAQC,IAAI,sCAGR8B,GAAUA,EAAOW,WACnBX,EAAOW,UAAUP,WAO5BnB,OAAM,SAAA2B,GACL3C,QAAQ2C,MAAM,4CAA6CA,MC3FjEC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDiB1C,SAAkBhB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIgB,IAAIC,GAAwBxB,OAAOC,SAASzD,MACpDiF,SAAWzB,OAAOC,SAASwB,OAIvC,OAGFzB,OAAO0B,iBAAiB,QAAQ,WAC9B,IAAMrB,EAAK,UAAMmB,GAAN,sBAEP1B,IAgEV,SAAiCO,EAAOC,GAEtCqB,MAAMtB,GACHjB,MAAK,SAAAwC,GAEJ,IAAMC,EAAcD,EAASE,QAAQtE,IAAI,gBAEnB,MAApBoE,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CzB,UAAUC,cAAcyB,MAAM7C,MAAK,SAAAsB,GACjCA,EAAawB,aAAa9C,MAAK,WAC7BY,OAAOC,SAASkC,eAKpB/B,EAAgBC,EAAOC,MAG1Bf,OAAM,WACLhB,QAAQC,IACN,oEArFA4D,CAAwB/B,EAAOC,GAI/BC,UAAUC,cAAcyB,MAAM7C,MAAK,WACjCb,QAAQC,IACN,iHAMJ4B,EAAgBC,EAAOC,OC3C/BE,K","file":"static/js/main.3fdc93b6.chunk.js","sourcesContent":["import React from 'react'\r\n//import PropTypes from 'prop-types'\r\n\r\nconst SpotifyButton = (props) => {\r\n  const isLoggedIn = props.isLoggedIn\r\n\r\n  let button\r\n  if(isLoggedIn) {\r\n    button = null\r\n  } else {\r\n    button = <a href='http://localhost:5000/api/spotify/auth'>Login</a>\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {button}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SpotifyButton","import React from 'react'\r\n\r\nconst Pokemon = ({ name, pokeIndex, onClick }) => {\r\n  return (\r\n    <div>\r\n      <button onClick={() => onClick()}>\r\n        <img \r\n          src={`https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${pokeIndex}.png`} \r\n          alt={`pokemon-no-${pokeIndex}`}\r\n          loading=\"lazy\"\r\n          />\r\n        <p>{name.toUpperCase()}</p>\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Pokemon","import React, { useState, useEffect } from 'react'\r\nimport Pokemon from './Pokemon'\r\nimport axios from 'axios'\r\n\r\nconst PokemonList = ({ isLoggedIn }) => {\r\n  // Pokemon State\r\n  const [pokemon, setPokemon] = useState([])\r\n  useEffect(() => {\r\n    async function fetchPokemon() {\r\n      const res = await axios.get('https://pokeapi.co/api/v2/pokemon?limit=151')\r\n      let pokemonArr = res.data.results\r\n\r\n      setPokemon(pokemonArr)\r\n    }\r\n    fetchPokemon()\r\n  }, [])\r\n\r\n  // Team State\r\n  const [team, setTeam] = useState([])\r\n  const [teamCount, setTeamCount] = useState(0)\r\n\r\n  const addPokemon = async (name, pokeIndex, url) => {\r\n    if(teamCount < 6) {\r\n      // Increments Team Count\r\n      setTeamCount(teamCount + 1)\r\n      // Fetch this pokemon's types\r\n      const res = await axios.get(url)\r\n      // Create Pokemon object\r\n      const pokemon = { name, pokeIndex, types: res.data.types }\r\n\r\n      // Pushes New Team Member to Team\r\n      team.push(pokemon)\r\n      setTeam(team)\r\n    } else {\r\n      console.log('Party is full')\r\n    }\r\n  }\r\n\r\n  const removePokemon = (index) => {\r\n    if(teamCount > 0) {\r\n      setTeamCount(teamCount - 1)\r\n\r\n      // Filters team based on the index of the array selected\r\n      setTeam(team.filter((_, i) => i !== index))\r\n    } else {\r\n      console.log('Party is empty')\r\n    }\r\n  }\r\n\r\n  const makePlaylist = (team) => {\r\n    if(teamCount === 6) {\r\n      axios.post('/api/spotify/makePlaylist', team)\r\n      return 'Creating Playlist'\r\n    } else {\r\n      return 'Fill You Team Up First!'\r\n    }\r\n  }\r\n\r\n  let list;\r\n  isLoggedIn ? list = \r\n    <div>\r\n      <h2>Choose Your Team</h2>\r\n      {pokemon.map(({ name, url }, index) => (\r\n        <Pokemon onClick={() => addPokemon(name, index, url)} pokeIndex={index + 1} name={name} key={url} />\r\n      ))}\r\n      <h1>Team</h1>\r\n      {team.map(({ name, pokeIndex }, index) => (\r\n        <Pokemon onClick={() => removePokemon(index)} pokeIndex={pokeIndex + 1} name={name} key={index} />\r\n      ))}\r\n      <button onClick={() => makePlaylist(team)}>Make Playlist</button>\r\n    </div>\r\n  :\r\n  list = null\r\n\r\n  return (\r\n    <div>\r\n      {list}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default PokemonList;","import React, { /* Component */ } from 'react';\r\nimport SpotifyButton from './SpotifyButton';\r\nimport PokemonList from './PokemonList';\r\nimport axios from 'axios';\r\n\r\nclass Dashboard extends React.Component {\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      name: '',\r\n      isLoggedIn: false,\r\n    }\r\n\t}\r\n\t\r\n  getMe() {\r\n    axios.get('/api/spotify/me')\r\n      .then(res => {\r\n          if(res.data.display_name) {\r\n              this.setState({isLoggedIn: true, name: res.data.display_name})\r\n          }\r\n      })\r\n      .catch(err => console.log(err))\r\n  }\r\n  componentDidMount() {\r\n    this.getMe();\r\n\t}\r\n\t\r\n  render() {\r\n    const { isLoggedIn } = this.state\r\n    return (\r\n      <div>\r\n        <h1>Dashboard { this.state.name }</h1>\r\n        <SpotifyButton isLoggedIn={isLoggedIn} />\r\n        <PokemonList isLoggedIn={isLoggedIn} />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Dashboard;","import React from 'react';\r\nimport Dashboard from './components/Dashboard'\r\n\r\nexport const App = () => {\r\n    return (\r\n        <div>\r\n            <Dashboard />\r\n        </div>\r\n    )\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {App} from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\nserviceWorker.register();"],"sourceRoot":""}